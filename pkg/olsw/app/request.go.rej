--- pkg/olsw/app/request.go
+++ pkg/olsw/app/request.go
@@ -124,30 +125,34 @@
 		out.Error("Request.onIpAddr: point notFound")
 		return
 	}
-	resp := &models.Network{
-		Name: n.Name,
-		IfAddr: recv.IfAddr,
-		Netmask: recv.Netmask,
-		Routes: n.Routes,
-	}
+	lease := r.getLease(recv.IfAddr, p, n)
 	if recv.IfAddr == "" { // not interface address, and try to alloc it.
-		lease := r.getLease(recv.IfAddr, p, n)
 		if lease != nil {
-			resp.IfAddr = lease.Address
-			resp.Netmask = n.Netmask
-			resp.Routes = n.Routes
-		} else {
-			resp.IfAddr = "169.254.0.0"
-			resp.Netmask = n.Netmask
-			resp.Routes = n.Routes
+			resp = &models.Network{
+				Name:    n.Name,
+				IfAddr:  lease.Address,
+				IpStart: n.IpStart,
+				IpEnd:   n.IpEnd,
+				Netmask: n.Netmask,
+				Routes:  n.Routes,
+			}
 		}
+		// get release failed.
+	} else {
+		resp = recv
 	}
-	out.Cmd("Request.onIpAddr: resp %s", resp)
-	if respStr, err := json.Marshal(resp); err == nil {
-		m := libol.NewControlFrame(libol.IpAddrResp, respStr)
+	if resp != nil {
+		out.Cmd("Request.onIpAddr: resp %s", resp)
+		if respStr, err := json.Marshal(resp); err == nil {
+			m := libol.NewControlFrame(libol.IpAddrResp, respStr)
+			_ = client.WriteMsg(m)
+		}
+		out.Info("Request.onIpAddr: %s", resp.IfAddr)
+	} else {
+		out.Error("Request.onIpAddr: %s no free address", recv.Name)
+		m := libol.NewControlFrame(libol.IpAddrResp, []byte("no free address"))
 		_ = client.WriteMsg(m)
 	}
-	out.Info("Request.onIpAddr: %s", resp.IfAddr)
 }
 
 func (r *Request) onLeave(client libol.SocketClient, data []byte) {
